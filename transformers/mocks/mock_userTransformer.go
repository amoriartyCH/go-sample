// Code generated by MockGen. DO NOT EDIT.
// Source: transformers/userTransformer.go

// Package mocks is a generated GoMock package.
package mocks

import (
	entity "github.com/amoriartyCH/go-sample/models/entity"
	rest "github.com/amoriartyCH/go-sample/models/rest"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUserTransformer is a mock of UserTransformer interface
type MockUserTransformer struct {
	ctrl     *gomock.Controller
	recorder *MockUserTransformerMockRecorder
}

// MockUserTransformerMockRecorder is the mock recorder for MockUserTransformer
type MockUserTransformerMockRecorder struct {
	mock *MockUserTransformer
}

// NewMockUserTransformer creates a new mock instance
func NewMockUserTransformer(ctrl *gomock.Controller) *MockUserTransformer {
	mock := &MockUserTransformer{ctrl: ctrl}
	mock.recorder = &MockUserTransformerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserTransformer) EXPECT() *MockUserTransformerMockRecorder {
	return m.recorder
}

// ToRest mocks base method
func (m *MockUserTransformer) ToRest(entity *entity.UserDao) *rest.UserRest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToRest", entity)
	ret0, _ := ret[0].(*rest.UserRest)
	return ret0
}

// ToRest indicates an expected call of ToRest
func (mr *MockUserTransformerMockRecorder) ToRest(entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToRest", reflect.TypeOf((*MockUserTransformer)(nil).ToRest), entity)
}

// ToEntity mocks base method
func (m *MockUserTransformer) ToEntity(rest *rest.UserRest) *entity.UserDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToEntity", rest)
	ret0, _ := ret[0].(*entity.UserDao)
	return ret0
}

// ToEntity indicates an expected call of ToEntity
func (mr *MockUserTransformerMockRecorder) ToEntity(rest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToEntity", reflect.TypeOf((*MockUserTransformer)(nil).ToEntity), rest)
}
